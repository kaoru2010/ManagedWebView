package com.example.kaoru.webviewerrorhandling;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.Build;
import android.os.Looper;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.webkit.WebView;

import android.os.Handler;
import android.os.SystemClock;
import android.support.annotation.NonNull;

public class ManagedWebView extends WebView {
    private static final String TAG = "WebView";
    private String mFailingUrl;

    public ManagedWebView(Context context) {
        super(context);
        init(context);
    }

    public ManagedWebView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context);
    }

    public ManagedWebView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context);
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public ManagedWebView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
        init(context);
    }

    private void init(Context context) {
        mStateMachine = new ManagedWebViewStateMachine();
        prepareStateMachine(true);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        Log.d(TAG, "onDraw");
//        super.onDraw(canvas);
        mStateMachine.onDraw(canvas);
    }

    private void checkThread() {
        if (Looper.myLooper() != Looper.getMainLooper()) {
            throw new IllegalThreadStateException();
        }
    }

    private void skipOnDraw(Canvas canvas) {
        canvas.drawColor(Color.WHITE);
    }

    @SuppressLint("WrongCall")
    private void handleOnDraw(Canvas canvas) {
        super.onDraw(canvas);
    }

    public void setFailingUrl(String failingUrl) {
        mFailingUrl = failingUrl;
    }

    public String getFailingUrl() {
        return mFailingUrl;
    }

    public boolean isFailingUrl(String url) {
        return TextUtils.equals(url, mFailingUrl);
    }

    // %%

    //
    // 以下の行は自動生成されているので直接編集しないでください。
    //
    // Generated by View Generator
    //

    private ManagedWebViewStateMachine mStateMachine = null;

    private void prepareStateMachine(boolean debugFlag) {
        mStateMachine.setDebugFlag(debugFlag);
        mStateMachine.enterStartState();
    }

    // Public method for ManagedWebViewStateMachine

    public void onPageStarted(String url) {
        mStateMachine.onPageStarted(url);
    }

    public void onReceivedError(String failingUrl) {
        mStateMachine.onReceivedError(failingUrl);
    }

    public void onPageFinished(String url) {
        mStateMachine.onPageFinished(url);
    }

    public void onLoadResource(String url) {
        mStateMachine.onLoadResource(url);
    }

    public class ManagedWebViewStateMachine {

        private static final int ManagedWebViewStateMachine_NORMAL = 0;
        private static final int ManagedWebViewStateMachine_LOADING_ERROR_PAGE = 1;
        private static final int ManagedWebViewStateMachine_ERROR = 2;

        private boolean mDebugFlag = false;
        private boolean mInTransition;
        private int mCurrentState;

        public ManagedWebViewStateMachine() {
        }

        public void enterStartState() {
            setFailingUrl(null);
        }

        public boolean isDebugFlag() {
            return mDebugFlag;
        }

        public void setDebugFlag(boolean debugFlag) {
            mDebugFlag = debugFlag;
        }

        public int getCurrentState() {
            return mCurrentState;
        }

        private void setCurrentState(int state) {
            mCurrentState = state;
            if (mDebugFlag && state < ManagedWebViewStateMachine_STATE_TABLE.length) {
                Log.d(TAG, "ManagedWebViewStateMachine: ENTER STATE: " + ManagedWebViewStateMachine_STATE_TABLE[state]);
            }
        }

        public boolean isInTransition() {
            return mInTransition;
        }

        public void onPageStarted(String url) {
            checkThread();
            if (mInTransition) throw new IllegalStateException("inTransition must be false. HINT: Use postOnPageStarted(String url).");

            mInTransition = true;

            switch (mCurrentState)
            {
            case ManagedWebViewStateMachine_LOADING_ERROR_PAGE:
                if (!isFailingUrl(url)) {
                    setCurrentState(ManagedWebViewStateMachine_NORMAL);
                    setFailingUrl(null);
                }
                break;

            case ManagedWebViewStateMachine_ERROR:
                setCurrentState(ManagedWebViewStateMachine_NORMAL);
                setFailingUrl(null);
                break;

            default:
                break;
            }
            mInTransition = false;
        }

        public boolean postOnPageStarted(final String url) {
            return post(new Runnable() {
                @Override
                public void run() {
                    onPageStarted(url);
                }
            });
        }

        public void onReceivedError(String failingUrl) {
            checkThread();
            if (mInTransition) throw new IllegalStateException("inTransition must be false. HINT: Use postOnReceivedError(String failingUrl).");

            mInTransition = true;

            switch (mCurrentState)
            {
            case ManagedWebViewStateMachine_NORMAL:
                setFailingUrl(failingUrl);
                setCurrentState(ManagedWebViewStateMachine_LOADING_ERROR_PAGE);
                break;

            default:
                break;
            }
            mInTransition = false;
        }

        public boolean postOnReceivedError(final String failingUrl) {
            return post(new Runnable() {
                @Override
                public void run() {
                    onReceivedError(failingUrl);
                }
            });
        }

        public void onPageFinished(String url) {
            checkThread();
            if (mInTransition) throw new IllegalStateException("inTransition must be false. HINT: Use postOnPageFinished(String url).");

            mInTransition = true;

            switch (mCurrentState)
            {
            case ManagedWebViewStateMachine_LOADING_ERROR_PAGE:
                if (isFailingUrl(url)) {
                    setCurrentState(ManagedWebViewStateMachine_ERROR);
                }
                break;

            default:
                break;
            }
            mInTransition = false;
        }

        public boolean postOnPageFinished(final String url) {
            return post(new Runnable() {
                @Override
                public void run() {
                    onPageFinished(url);
                }
            });
        }

        public void onLoadResource(String url) {
            checkThread();
            if (mInTransition) throw new IllegalStateException("inTransition must be false. HINT: Use postOnLoadResource(String url).");

            mInTransition = true;

            switch (mCurrentState)
            {
            case ManagedWebViewStateMachine_LOADING_ERROR_PAGE:
                if ("file:///android_asset/webkit/android-weberror.png".equals(url)) {
                    setCurrentState(ManagedWebViewStateMachine_ERROR);
                }
                break;

            default:
                break;
            }
            mInTransition = false;
        }

        public boolean postOnLoadResource(final String url) {
            return post(new Runnable() {
                @Override
                public void run() {
                    onLoadResource(url);
                }
            });
        }

        public void onDraw(Canvas canvas) {
            checkThread();
            if (mInTransition) throw new IllegalStateException("inTransition must be false. HINT: Use postOnDraw(Canvas canvas).");

            mInTransition = true;

            switch (mCurrentState)
            {
            case ManagedWebViewStateMachine_NORMAL:
                handleOnDraw(canvas);
                break;

            case ManagedWebViewStateMachine_ERROR:
                skipOnDraw(canvas);
                break;

            default:
                break;
            }
            mInTransition = false;
        }

        public boolean postOnDraw(final Canvas canvas) {
            return post(new Runnable() {
                @Override
                public void run() {
                    onDraw(canvas);
                }
            });
        }
    }

    private static final String[] ManagedWebViewStateMachine_STATE_TABLE = {"NORMAL", "LOADING_ERROR_PAGE", "ERROR"};

}
